#!/bin/bash

echo "üöÄ Script de d√©ploiement final - Fresque Temporelle"
echo "=================================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    print_error "package.json non trouv√©. Assurez-vous d'√™tre dans le r√©pertoire racine du projet."
    exit 1
fi

print_status "R√©pertoire de travail v√©rifi√©"

# V√©rifier les d√©pendances
if [ ! -d "node_modules" ]; then
    print_warning "node_modules non trouv√©. Installation des d√©pendances..."
    npm install
    if [ $? -ne 0 ]; then
        print_error "√âchec de l'installation des d√©pendances"
        exit 1
    fi
fi

print_status "D√©pendances v√©rifi√©es"

# V√©rifier les fichiers de donn√©es
if [ ! -f "data/categories.csv" ]; then
    print_error "data/categories.csv non trouv√©"
    exit 1
fi

if [ ! -f "data/histoire_informatique_evenements.csv" ]; then
    print_error "data/histoire_informatique_evenements.csv non trouv√©"
    exit 1
fi

print_status "Fichiers de donn√©es v√©rifi√©s"

# G√©n√©rer les cartes
print_warning "G√©n√©ration des cartes..."
npm run generate

if [ $? -ne 0 ]; then
    print_error "√âchec de la g√©n√©ration des cartes"
    exit 1
fi

print_status "Cartes g√©n√©r√©es avec succ√®s"

# V√©rifier les fichiers g√©n√©r√©s
if [ ! -f "output/fresque_temporelle.pdf" ]; then
    print_error "PDF complet non g√©n√©r√©"
    exit 1
fi

if [ ! -d "output/cards" ]; then
    print_error "Dossier des cartes individuelles non trouv√©"
    exit 1
fi

card_count=$(ls output/cards/*.pdf 2>/dev/null | wc -l)
if [ $card_count -eq 0 ]; then
    print_error "Aucune carte individuelle g√©n√©r√©e"
    exit 1
fi

print_status "$card_count cartes individuelles g√©n√©r√©es"

# V√©rifier la page d'accueil
if [ ! -f "index.html" ]; then
    print_error "index.html non trouv√©"
    exit 1
fi

print_status "Page d'accueil v√©rifi√©e"

# V√©rifier les fichiers de configuration GitHub Pages
required_files=("manifest.json" "robots.txt" "sitemap.xml" ".nojekyll" "404.html")
for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        print_warning "$file non trouv√©"
    else
        print_status "$file pr√©sent"
    fi
done

# V√©rifier le workflow GitHub Actions
if [ ! -f ".github/workflows/deploy.yml" ]; then
    print_warning ".github/workflows/deploy.yml non trouv√©"
else
    print_status "Workflow GitHub Actions configur√©"
fi

# Afficher les informations de d√©ploiement
echo ""
echo "üìã Informations de d√©ploiement :"
echo "================================"
echo "‚Ä¢ URL du site : https://votre-username.github.io/fresque-informatique"
echo "‚Ä¢ Nombre d'√©v√©nements : $(grep -c "^[^,]" data/histoire_informatique_evenements.csv)"
echo "‚Ä¢ Nombre de cat√©gories : $(grep -c "^[^,]" data/categories.csv)"
echo "‚Ä¢ Cartes individuelles : $card_count"
echo "‚Ä¢ Taille du PDF complet : $(du -h output/fresque_temporelle.pdf | cut -f1)"

echo ""
print_warning "IMPORTANT : N'oubliez pas de modifier l'URL dans package.json !"
echo "Remplacez 'votre-username' par votre nom d'utilisateur GitHub"

echo ""
echo "üöÄ Pour d√©ployer :"
echo "1. Modifiez l'URL dans package.json"
echo "2. Poussez le code sur GitHub"
echo "3. Activez GitHub Pages dans les param√®tres du repository"
echo "4. Le site sera automatiquement d√©ploy√© via GitHub Actions"

echo ""
print_status "Pr√™t pour le d√©ploiement ! üéâ"