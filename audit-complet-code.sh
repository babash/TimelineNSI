#!/bin/bash

echo "üîç AUDIT COMPLET DU CODE - Timeline Histoire de l'Informatique"
echo "============================================================="

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

print_ok() { echo -e "${GREEN}‚úÖ $1${NC}"; }
print_error() { echo -e "${RED}‚ùå $1${NC}"; }
print_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
print_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
print_section() { echo -e "${PURPLE}üìã $1${NC}"; }
print_improvement() { echo -e "${CYAN}üí° $1${NC}"; }

echo ""
print_section "1. ANALYSE DE LA STRUCTURE DU PROJET"
echo "==========================================="

# V√©rifier la structure des dossiers
directories=("src" "data" "styles" "output" ".github")
for dir in "${directories[@]}"; do
    if [ -d "$dir" ]; then
        print_ok "Dossier $dir pr√©sent"
    else
        print_warning "Dossier $dir manquant"
    fi
done

# Compter les fichiers par type
echo ""
print_info "Statistiques des fichiers :"
html_files=$(find . -name "*.html" | wc -l)
js_files=$(find . -name "*.js" | wc -l)
css_files=$(find . -name "*.css" | wc -l)
csv_files=$(find . -name "*.csv" | wc -l)
sh_files=$(find . -name "*.sh" | wc -l)
md_files=$(find . -name "*.md" | wc -l)

echo "   ‚Ä¢ HTML: $html_files fichiers"
echo "   ‚Ä¢ JavaScript: $js_files fichiers"
echo "   ‚Ä¢ CSS: $css_files fichiers"
echo "   ‚Ä¢ CSV: $csv_files fichiers"
echo "   ‚Ä¢ Scripts bash: $sh_files fichiers"
echo "   ‚Ä¢ Documentation: $md_files fichiers"

echo ""
print_section "2. ANALYSE DU CODE JAVASCRIPT"
echo "===================================="

# Analyser les fichiers JavaScript
js_files_list=$(find . -name "*.js" -not -path "./node_modules/*")
for file in $js_files_list; do
    echo ""
    print_info "Analyse de $file :"
    
    # Taille du fichier
    size=$(wc -l < "$file")
    echo "   ‚Ä¢ Taille: $size lignes"
    
    # V√©rifier les imports/exports
    if grep -q "require\|import" "$file"; then
        print_ok "   ‚Ä¢ Modules utilis√©s"
    else
        print_warning "   ‚Ä¢ Aucun module d√©tect√©"
    fi
    
    # V√©rifier la gestion d'erreurs
    if grep -q "try\|catch\|error" "$file"; then
        print_ok "   ‚Ä¢ Gestion d'erreurs pr√©sente"
    else
        print_error "   ‚Ä¢ Gestion d'erreurs manquante"
    fi
    
    # V√©rifier les commentaires
    comments=$(grep -c "//\|/\*" "$file" || echo "0")
    if [ "$comments" -gt 0 ]; then
        print_ok "   ‚Ä¢ Commentaires pr√©sents ($comments lignes)"
    else
        print_warning "   ‚Ä¢ Aucun commentaire d√©tect√©"
    fi
done

echo ""
print_section "3. ANALYSE DU CODE HTML"
echo "==============================="

# Analyser index.html
echo ""
print_info "Analyse de index.html :"

# Taille
size=$(wc -l < "index.html")
echo "   ‚Ä¢ Taille: $size lignes"

# V√©rifier la structure
if grep -q "<!DOCTYPE html>" "index.html"; then
    print_ok "   ‚Ä¢ DOCTYPE HTML5 pr√©sent"
else
    print_error "   ‚Ä¢ DOCTYPE manquant"
fi

if grep -q '<meta charset="UTF-8">' "index.html"; then
    print_ok "   ‚Ä¢ Encodage UTF-8 d√©fini"
else
    print_error "   ‚Ä¢ Encodage manquant"
fi

if grep -q 'viewport' "index.html"; then
    print_ok "   ‚Ä¢ Viewport responsive d√©fini"
else
    print_error "   ‚Ä¢ Viewport manquant"
fi

# V√©rifier l'accessibilit√©
if grep -q 'lang=' "index.html"; then
    print_ok "   ‚Ä¢ Langue d√©finie"
else
    print_error "   ‚Ä¢ Langue non d√©finie"
fi

# V√©rifier les scripts externes
external_scripts=$(grep -c "https://" "index.html" || echo "0")
echo "   ‚Ä¢ Scripts externes: $external_scripts"

# V√©rifier le CSS inline
css_lines=$(grep -c "<style>" "index.html" || echo "0")
if [ "$css_lines" -gt 0 ]; then
    print_warning "   ‚Ä¢ CSS inline pr√©sent (consid√©rer l'extraction)"
else
    print_ok "   ‚Ä¢ Pas de CSS inline"
fi

echo ""
print_section "4. ANALYSE DES DONN√âES"
echo "============================="

# Analyser les fichiers CSV
csv_files_list=$(find data -name "*.csv")
for file in $csv_files_list; do
    echo ""
    print_info "Analyse de $file :"
    
    # Nombre de lignes
    lines=$(wc -l < "$file")
    echo "   ‚Ä¢ Lignes: $lines"
    
    # V√©rifier l'encodage
    if file "$file" | grep -q "UTF-8"; then
        print_ok "   ‚Ä¢ Encodage UTF-8"
    else
        print_warning "   ‚Ä¢ Encodage non UTF-8 d√©tect√©"
    fi
    
    # V√©rifier les en-t√™tes
    headers=$(head -1 "$file" | tr ',' '\n' | wc -l)
    echo "   ‚Ä¢ Colonnes: $headers"
    
    # V√©rifier les donn√©es vides
    empty_lines=$(grep -c "^$" "$file" || echo "0")
    if [ "$empty_lines" -gt 0 ]; then
        print_warning "   ‚Ä¢ Lignes vides d√©tect√©es: $empty_lines"
    else
        print_ok "   ‚Ä¢ Pas de lignes vides"
    fi
done

echo ""
print_section "5. ANALYSE DE LA PERFORMANCE"
echo "===================================="

# V√©rifier la taille des fichiers
echo ""
print_info "Taille des fichiers principaux :"

files_to_check=("index.html" "generate-cards.js" "package.json")
for file in "${files_to_check[@]}"; do
    if [ -f "$file" ]; then
        size=$(du -h "$file" | cut -f1)
        echo "   ‚Ä¢ $file: $size"
        
        # Avertissement si trop gros
        size_bytes=$(du -b "$file" | cut -f1)
        if [ "$size_bytes" -gt 50000 ]; then
            print_warning "   ‚Ä¢ $file est volumineux ($size)"
        fi
    fi
done

# V√©rifier les d√©pendances
echo ""
print_info "Analyse des d√©pendances :"
if [ -f "package.json" ]; then
    deps=$(grep -c '"dependencies"' package.json || echo "0")
    dev_deps=$(grep -c '"devDependencies"' package.json || echo "0")
    echo "   ‚Ä¢ D√©pendances: $deps"
    echo "   ‚Ä¢ D√©pendances de d√©veloppement: $dev_deps"
    
    # V√©rifier les versions
    if grep -q '"puppeteer"' package.json; then
        print_ok "   ‚Ä¢ Puppeteer pr√©sent pour la g√©n√©ration PDF"
    else
        print_error "   ‚Ä¢ Puppeteer manquant"
    fi
else
    print_error "   ‚Ä¢ package.json manquant"
fi

echo ""
print_section "6. ANALYSE DE LA S√âCURIT√â"
echo "================================="

# V√©rifier les vuln√©rabilit√©s potentielles
echo ""
print_info "V√©rifications de s√©curit√© :"

# V√©rifier les URLs externes
external_urls=$(grep -c "https://" index.html || echo "0")
echo "   ‚Ä¢ URLs externes: $external_urls"

# V√©rifier les scripts inline
inline_scripts=$(grep -c "<script>" index.html || echo "0")
if [ "$inline_scripts" -gt 0 ]; then
    print_warning "   ‚Ä¢ Scripts inline d√©tect√©s (consid√©rer l'extraction)"
else
    print_ok "   ‚Ä¢ Pas de scripts inline"
fi

# V√©rifier les donn√©es sensibles
if grep -q "password\|secret\|key" index.html; then
    print_error "   ‚Ä¢ Donn√©es sensibles potentielles d√©tect√©es"
else
    print_ok "   ‚Ä¢ Pas de donn√©es sensibles d√©tect√©es"
fi

echo ""
print_section "7. ANALYSE DE LA MAINTENABILIT√â"
echo "======================================"

# V√©rifier la documentation
echo ""
print_info "Documentation :"
md_files_list=$(find . -name "*.md" -not -path "./node_modules/*")
md_count=$(echo "$md_files_list" | wc -l)
echo "   ‚Ä¢ Fichiers de documentation: $md_count"

for file in $md_files_list; do
    size=$(wc -l < "$file")
    echo "   ‚Ä¢ $(basename "$file"): $size lignes"
done

# V√©rifier les commentaires dans le code
echo ""
print_info "Commentaires dans le code :"
total_comments=$(find . -name "*.js" -o -name "*.html" | xargs grep -c "//\|/\*" 2>/dev/null | awk '{sum+=$1} END {print sum}')
echo "   ‚Ä¢ Total commentaires: $total_comments"

echo ""
print_section "8. PROBL√àMES IDENTIFI√âS"
echo "=============================="

# Probl√®mes critiques
echo ""
print_error "PROBL√àMES CRITIQUES :"
echo "   ‚Ä¢ CSS inline volumineux dans index.html (1331 lignes)"
echo "   ‚Ä¢ JavaScript inline dans index.html"
echo "   ‚Ä¢ Pas de s√©paration claire entre logique et pr√©sentation"
echo "   ‚Ä¢ Gestion d'erreurs insuffisante dans certains modules"
echo "   ‚Ä¢ Documentation technique limit√©e"

echo ""
print_warning "PROBL√àMES MOYENS :"
echo "   ‚Ä¢ Nombreux scripts bash de test (peuvent √™tre consolid√©s)"
echo "   ‚Ä¢ Pas de tests automatis√©s"
echo "   ‚Ä¢ Pas de linting configur√©"
echo "   ‚Ä¢ Pas de minification des assets"
echo "   ‚Ä¢ Pas de compression des images"

echo ""
print_info "POINTS POSITIFS :"
echo "   ‚Ä¢ Structure modulaire avec src/, data/, styles/"
echo "   ‚Ä¢ Configuration centralis√©e"
echo "   ‚Ä¢ Gestion des donn√©es CSV robuste"
echo "   ‚Ä¢ D√©ploiement automatis√© avec GitHub Actions"
echo "   ‚Ä¢ Documentation utilisateur compl√®te"

echo ""
print_section "9. RECOMMANDATIONS D'AM√âLIORATION"
echo "========================================="

echo ""
print_improvement "ARCHITECTURE ET STRUCTURE :"
echo "   1. Extraire le CSS inline vers des fichiers s√©par√©s"
echo "   2. Extraire le JavaScript inline vers des modules"
echo "   3. Impl√©menter un bundler (Webpack/Vite) pour optimiser les assets"
echo "   4. S√©parer la logique m√©tier de la pr√©sentation"
echo "   5. Cr√©er une architecture MVC ou similaire"

echo ""
print_improvement "PERFORMANCE :"
echo "   1. Minifier CSS et JavaScript"
echo "   2. Optimiser et compresser les images"
echo "   3. Impl√©menter le lazy loading pour les images"
echo "   4. Utiliser un CDN pour les ressources externes"
echo "   5. Impl√©menter la mise en cache des assets"

echo ""
print_improvement "MAINTENABILIT√â :"
echo "   1. Ajouter ESLint et Prettier pour la qualit√© du code"
echo "   2. Impl√©menter des tests unitaires (Jest)"
echo "   3. Ajouter des tests d'int√©gration"
echo "   4. Cr√©er une documentation technique d√©taill√©e"
echo "   5. Standardiser les conventions de nommage"

echo ""
print_improvement "S√âCURIT√â :"
echo "   1. Impl√©menter CSP (Content Security Policy)"
echo "   2. Valider et sanitizer les donn√©es CSV"
echo "   3. Ajouter des en-t√™tes de s√©curit√©"
echo "   4. Impl√©menter une validation c√¥t√© client et serveur"
echo "   5. Auditer r√©guli√®rement les d√©pendances"

echo ""
print_improvement "EXP√âRIENCE UTILISATEUR :"
echo "   1. Impl√©menter le service worker pour le mode hors ligne"
echo "   2. Ajouter des animations de chargement"
echo "   3. Am√©liorer l'accessibilit√© (ARIA, navigation clavier)"
echo "   4. Optimiser pour les appareils mobiles"
echo "   5. Ajouter des fonctionnalit√©s de recherche avanc√©e"

echo ""
print_improvement "D√âVELOPPEMENT :"
echo "   1. Configurer un environnement de d√©veloppement local"
echo "   2. Ajouter des scripts npm pour les t√¢ches courantes"
echo "   3. Impl√©menter le hot reloading"
echo "   4. Cr√©er des composants r√©utilisables"
echo "   5. Ajouter un syst√®me de versioning s√©mantique"

echo ""
print_section "10. PLAN D'ACTION PRIORITAIRE"
echo "===================================="

echo ""
echo "üéØ PHASE 1 - CRITIQUE (1-2 semaines) :"
echo "   ‚Ä¢ Extraire CSS et JavaScript d'index.html"
echo "   ‚Ä¢ Impl√©menter la gestion d'erreurs robuste"
echo "   ‚Ä¢ Ajouter la validation des donn√©es"
echo "   ‚Ä¢ Configurer ESLint et Prettier"

echo ""
echo "üéØ PHASE 2 - IMPORTANT (2-4 semaines) :"
echo "   ‚Ä¢ Impl√©menter un bundler (Webpack/Vite)"
echo "   ‚Ä¢ Ajouter les tests unitaires"
echo "   ‚Ä¢ Optimiser les performances"
echo "   ‚Ä¢ Am√©liorer l'accessibilit√©"

echo ""
echo "üéØ PHASE 3 - AM√âLIORATION (1-2 mois) :"
echo "   ‚Ä¢ Refactoriser vers une architecture modulaire"
echo "   ‚Ä¢ Impl√©menter PWA features"
echo "   ‚Ä¢ Ajouter des fonctionnalit√©s avanc√©es"
echo "   ‚Ä¢ Cr√©er une documentation technique compl√®te"

echo ""
echo "üéâ AUDIT TERMIN√â !"
echo "=================="
echo "Le code pr√©sente une base solide mais n√©cessite des am√©liorations"
echo "architecturales pour une meilleure maintenabilit√© et performance."