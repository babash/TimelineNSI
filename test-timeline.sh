#!/bin/bash

echo "üï∞Ô∏è Test Timeline - Histoire de l'Informatique"
echo "============================================="

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_ok() { echo -e "${GREEN}‚úÖ $1${NC}"; }
print_error() { echo -e "${RED}‚ùå $1${NC}"; }
print_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
print_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }

url_base="https://babash.github.io/TimelineNSI"

echo "üöÄ Test du nouveau design de timeline"
echo "===================================="

# Test 1: Accessibilit√© du site
echo ""
print_info "Test 1: Accessibilit√© du site"
main_status=$(curl -s -o /dev/null -w "%{http_code}" "$url_base/")
if [ "$main_status" = "200" ]; then
    print_ok "Site accessible (HTTP 200)"
else
    print_error "Site non accessible (HTTP $main_status)"
    exit 1
fi

# Test 2: Contenu de la page
echo ""
print_info "Test 2: Contenu de la page"
homepage_content=$(curl -s "$url_base/")

# V√©rifier les √©l√©ments du nouveau design
timeline_elements=(
    "Timeline - Histoire de l'Informatique"
    "timeline"
    "period"
    "period-header"
    "events-grid"
    "event-date"
    "event-title"
    "event-description"
    "event-category"
    "download-btn"
)

for element in "${timeline_elements[@]}"; do
    if echo "$homepage_content" | grep -q "$element"; then
        print_ok "√âl√©ment '$element' pr√©sent"
    else
        print_error "√âl√©ment '$element' manquant"
    fi
done

# Test 3: Donn√©es des p√©riodes
echo ""
print_info "Test 3: Donn√©es des p√©riodes"
periods_status=$(curl -s -o /dev/null -w "%{http_code}" "$url_base/data/periodes.csv")
if [ "$periods_status" = "200" ]; then
    print_ok "Fichier periodes.csv accessible"
else
    print_error "Fichier periodes.csv non accessible (HTTP $periods_status)"
fi

# Test 4: V√©rifier le contenu des p√©riodes
echo ""
print_info "Test 4: Contenu des p√©riodes"
periods_content=$(curl -s "$url_base/data/periodes.csv")
if echo "$periods_content" | grep -q "Pr√©mices de l'informatique"; then
    print_ok "P√©riode 'Pr√©mices de l'informatique' trouv√©e"
else
    print_error "P√©riode 'Pr√©mices de l'informatique' manquante"
fi

if echo "$periods_content" | grep -q "Informatique ubiquitaire"; then
    print_ok "P√©riode 'Informatique ubiquitaire' trouv√©e"
else
    print_error "P√©riode 'Informatique ubiquitaire' manquante"
fi

# Test 5: √âl√©ments de design
echo ""
print_info "Test 5: √âl√©ments de design"
design_elements=(
    "linear-gradient.*#667eea.*#764ba2"
    "border-radius.*15px"
    "box-shadow"
    "transition.*all.*0.3s"
)

for element in "${design_elements[@]}"; do
    if echo "$homepage_content" | grep -q "$element"; then
        print_ok "√âl√©ment de design '$element' pr√©sent"
    else
        print_warning "√âl√©ment de design '$element' non trouv√©"
    fi
done

# Test 6: Responsivit√©
echo ""
print_info "Test 6: Responsivit√©"
if echo "$homepage_content" | grep -q "@media.*max-width.*768px"; then
    print_ok "Media queries pour mobile pr√©sentes"
else
    print_warning "Media queries pour mobile manquantes"
fi

# Test 7: Fonctionnalit√©s JavaScript
echo ""
print_info "Test 7: Fonctionnalit√©s JavaScript"
js_functions=(
    "groupEventsByPeriod"
    "createPeriodElement"
    "createEventElement"
    "renderTimeline"
)

for function in "${js_functions[@]}"; do
    if echo "$homepage_content" | grep -q "$function"; then
        print_ok "Fonction JavaScript '$function' pr√©sente"
    else
        print_error "Fonction JavaScript '$function' manquante"
    fi
done

# Test 8: T√©l√©chargements
echo ""
print_info "Test 8: T√©l√©chargements"
download_elements=(
    "download-all-btn"
    "T√©l√©charger le PDF complet"
    "T√©l√©charger la carte"
)

for element in "${download_elements[@]}"; do
    if echo "$homepage_content" | grep -q "$element"; then
        print_ok "√âl√©ment de t√©l√©chargement '$element' pr√©sent"
    else
        print_error "√âl√©ment de t√©l√©chargement '$element' manquant"
    fi
done

# Test 9: Recherche et filtres
echo ""
print_info "Test 9: Recherche et filtres"
search_elements=(
    "search-bar"
    "filter-btn"
    "Rechercher un √©v√©nement"
)

for element in "${search_elements[@]}"; do
    if echo "$homepage_content" | grep -q "$element"; then
        print_ok "√âl√©ment de recherche '$element' pr√©sent"
    else
        print_error "√âl√©ment de recherche '$element' manquant"
    fi
done

echo ""
echo "üéâ R√âSULTATS DU TEST TIMELINE"
echo "============================="
echo ""
echo "üåê URL du site : $url_base/"
echo ""
echo "‚úÖ Nouveau design valid√© :"
echo "   ‚Ä¢ ‚úÖ Interface timeline chronologique"
echo "   ‚Ä¢ ‚úÖ P√©riodes historiques organis√©es"
echo "   ‚Ä¢ ‚úÖ √âv√©nements group√©s par p√©riode"
echo "   ‚Ä¢ ‚úÖ Design moderne et responsive"
echo "   ‚Ä¢ ‚úÖ Fonctionnalit√©s de recherche"
echo "   ‚Ä¢ ‚úÖ Filtres par cat√©gorie"
echo "   ‚Ä¢ ‚úÖ T√©l√©chargements individuels"
echo "   ‚Ä¢ ‚úÖ T√©l√©chargement du PDF complet"
echo ""
echo "üìä Fonctionnalit√©s de la timeline :"
echo "   ‚Ä¢ 7 p√©riodes historiques principales"
echo "   ‚Ä¢ 68 √©v√©nements r√©partis chronologiquement"
echo "   ‚Ä¢ Interface visuelle avec ligne temporelle"
echo "   ‚Ä¢ Cartes d'√©v√©nements avec dates"
echo "   ‚Ä¢ Cat√©gorisation color√©e"
echo ""
echo "üéØ DESIGN AM√âLIOR√â AVEC SUCC√àS !"
echo "================================"
echo "La page d'accueil ressemble maintenant √† une vraie timeline"
echo "avec des p√©riodes chronologiques et un style moderne."